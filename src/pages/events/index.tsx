import { useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { Input } from "~/components/ui/input";
import Navbar from "~/components/navbar";
import { Button } from "~/components/ui/button";
import { Label } from "~/components/ui/label";
import { useState } from "react";
import {
  Sheet,
  SheetTrigger,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
} from "~/components/ui/sheet";

import { api } from "~/utils/api";
import { ScrollArea } from "~/components/ui/scroll-area";

const CreateEventWizard = () => {
  const [startDate, setStartDate] = useState(
    new Date().toISOString().split(":", 2).join(":")
  );
  //add 1 hour to start date
  const tmp = new Date(startDate);
  tmp.setHours(tmp.getHours() + 1);

  const [endDate, setEndDate] = useState(
    new Date(tmp).toISOString().split(":", 2).join(":")
  );

  console.log("Start: " + startDate);
  console.log("End: " + endDate);

  return (
    <Sheet>
      <SheetTrigger>Open</SheetTrigger>
      <SheetContent>
        <SheetHeader>
          <SheetTitle>Create new Event</SheetTitle>
          <SheetDescription>
            Create a new event with all the details here.
          </SheetDescription>
        </SheetHeader>
        <div className="grid gap-4 py-4">
          <div className="grid gap-4">
            <div>
              <Label htmlFor="title">Title</Label>
              <Input id="title" placeholder="Title" />
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Input id="description" placeholder="Description" />
            </div>

            <div className="grid grid-cols-2 gap-x-4 gap-y-2">
              <div>
                <Label htmlFor="startDate">Start</Label>
                <Input
                  id="startDate"
                  type="datetime-local"
                  value={startDate}
                  onChange={(e) => {
                    console.log(e.target.value);
                    let startTs = e.target.valueAsDate;
                    let endTs = e.target.valueAsDate;
                    if (!startTs) {
                      startTs = new Date();
                    }
                    if (!endTs) {
                      endTs = new Date();
                    }
                    endTs.setHours(endTs.getHours() + 1);
                    setStartDate(startTs.toISOString().split(":", 2).join(":"));
                    setEndDate(endTs.toISOString().split(":", 2).join(":"));
                  }}
                />
              </div>
              <div>
                <Label htmlFor="endDate">End</Label>
                <Input
                  id="endDate"
                  type="datetime-local"
                  defaultValue={endDate}
                  value={endDate}
                />
              </div>
              <div>
                <Label htmlFor="meetDate">Meet</Label>
                <Input id="meetDate" type="datetime-local" />
              </div>
            </div>

            <div>
              <Label htmlFor="location">Location</Label>
              <Input id="location" placeholder="Location" />
            </div>

            <div>
              <Label htmlFor="tags">Tags</Label>
              <ScrollArea className="h-72 w-48 rounded-md border" id="tags">
                <div className="p-4">
                  <div className="grid max-w-sm grid-cols-1 justify-center gap-2">
                    <Button variant="outline">Tag 1</Button>
                    <Button variant="outline">Tag 2</Button>
                    <Button variant="outline">Tag 3</Button>
                    <Button variant="outline">Tag 4</Button>
                  </div>
                </div>
              </ScrollArea>
            </div>
          </div>
        </div>
        <SheetFooter>
          <Button type="submit">Save changes</Button>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  );
};

const Home: NextPage = () => {
  const { user, isSignedIn } = useUser();
  if (!isSignedIn) {
    return <div></div>;
  }

  const { data } = api.event.getAll.useQuery();
  console.log(data);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-screen">
        <Navbar />
        <main className="flex h-full max-h-full justify-center">
          <div className="flex h-full w-full justify-center border-x border-slate-400 md:max-w-3xl">
            <div>
              {isSignedIn && <CreateEventWizard />}
              {data?.map((event) => (
                <div key={event.id} className="text-white ">
                  <h1>{event.title}</h1>
                  <h3>
                    From {new Date(event.start).toLocaleString()} to{" "}
                    {new Date(event.end).toLocaleString()}
                  </h3>
                  <p>{event.description}</p>
                </div>
              ))}
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export default Home;
